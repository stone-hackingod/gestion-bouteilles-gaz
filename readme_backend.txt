# üîß BackendGaz - API Node.js pour la gestion de gaz

BackendGaz est une API RESTful d√©velopp√©e en Node.js avec Express, con√ßue pour g√©rer les op√©rations de distribution de gaz : utilisateurs, livraisons, stocks, etc.

---

## üì¶ Fonctionnalit√©s principales

- üîê Authentification JWT
- üë§ Gestion des utilisateurs
- üì¶ Gestion des stocks de gaz
- üßæ Cr√©ation / modification / suppression de commandes
- üöö Suivi des livraisons

---

## üõ†Ô∏è Technologies utilis√©es

| Technologie       | R√¥le                                 |
|-------------------|--------------------------------------|
| Node.js           | Environnement JavaScript backend     |
| Express.js        | Framework web l√©ger pour API REST    |
| MongoDB + Mongoose| Base de donn√©es NoSQL + ODM          |
| JSON Web Token    | Authentification s√©curis√©e           |
| Nodemon           | Rechargement automatique en dev      |
| GitHub Actions    | Int√©gration continue (CI/CD)         |

---

## ‚öôÔ∏è Installation & Lancement

```bash
git clone https://github.com/Yuniel241/BackendGaz.git
cd BackendGaz
npm install

# üîÑ Lancer en mode d√©veloppement (rechargement automatique)
nodemon src/index.js

# üöÄ Lancer en mode production
node src/index.js

# üåê L'API sera accessible √† l'adresse :
# http://localhost:5000

```
---



# üìö Documentation API

**Base URL:** `http://localhost:5000/api`

## üîê Middleware li√©s √† l'authentification
   Middleware | Description |
 |------------|-------------|
 | `protect` | Prot√®ge les routes. V√©rifie et d√©code le token JWT. Autorise aussi l'inscription du tout premier utilisateur sans authentification. |
 | `isAdmin` | V√©rifie que l'utilisateur est un administrateur. |
 | `restrictTo(...roles)` | Permet d‚Äôautoriser l‚Äôacc√®s √† certaines routes uniquement √† certains r√¥les d√©finis. |

## üìå Authentification

### POST /api/auth/register

**Description:** Cr√©e un nouvel utilisateur. Le premier utilisateur cr√©√© devient administrateur automatiquement. Ensuite, seuls les admins peuvent en cr√©er d'autres.

**Protection:** Ouvert sans token si aucun utilisateur n'existe. Prot√©g√© par `protect` ensuite.

**Corps de la requ√™te:**
```json
{
  "name": "Nom Complet",
  "email": "exemple@email.com",
  "password": "MotDePasseFort123",
  "role": "admin"
}
```
**R√©ponse r√©ussie:**
```json
{
  "message": "Utilisateur cr√©√© avec succ√®s",
  "user": {
    "name": "Nom Complet",
    "email": "exemple@email.com",
    "password": "\$2b\$10\$2H4qUmb0/I...",
    "role": "admin",
    "_id": "68449a7efaccd886e6d9379f",
    "createdAt": "2025-06-07T20:01:02.631Z",
    "updatedAt": "2025-06-07T20:01:02.631Z"
  }
}
```
**Erreurs possibles:**  

400: Email d√©j√† utilis√©  
403: Seuls les admins peuvent cr√©er de nouveaux utilisateurs  
500: Erreur serveur  

### POST /api/auth/login
**Description:** Connexion utilisateur (sauf le r√¥le driver).

**Corps de la requ√™te**:
```json
{
  "email": "exemple@email.com",
  "password": "MotDePasseFort123"
}
```
**R√©ponse r√©ussie:** 
```json
{
  "_id": "id_utilisateur",
  "name": "Nom",
  "email": "exemple@email.com",
  "role": "admin",
  "token": "jwt_token"
}
```

**Erreurs possibles:**  

401: Email ou mot de passe incorrect  
401: Les chauffeurs ne peuvent pas se connecter  

## GET /api/auth/profile
**Description**: R√©cup√®re les informations du profil de l‚Äôutilisateur actuellement connect√©.  

**Protection:** protect

**R√©ponse r√©ussie:**
```json
{
  "_id": "id_utilisateur",
  "name": "Nom",
  "email": "email@email.com",
  "role": "admin"
}
```
**Erreurs possibles:**  

401: Token absent, invalide ou expir√©  
404: Utilisateur non trouv√©  
### Exemple de Header d‚Äôauthentification: 
```http
Authorization: Bearer <token JWT>
```

## üë• Utilisateurs
## GET /api/users
**Description:** R√©cup√®re la liste de tous les utilisateurs.  
**Acc√®s:** Admin uniquement  
**Headers:**
```http
Authorization: Bearer <token>
```
**R√©ponse r√©ussie:**
```json
[
  {
    "_id": "664c3c6e1234567890abcdef",
    "name": "Jean Dupont",
    "email": "jean@example.com",
    "role": "driver",
    "createdAt": "2024-05-23T12:34:56.789Z",
    "updatedAt": "2024-05-23T12:34:56.789Z"
  }
]
```

## PUT /api/users/
**Description:** Met √† jour un utilisateur existant.  
**Acc√®s:** Admin uniquement  
**Headers:**
```http
Authorization: Bearer <token>
Content-Type: application/json
```
**Corps de la requ√™te:**
```json
{
  "name": "Nouveau Nom",
  "email": "nouveau@email.com",
  "role": "controller"
}
```
**R√©ponse r√©ussie:**

```json
{
  "_id": "664c3c6e1234567890abcdef",
  "name": "Nouveau Nom",
  "email": "nouveau@email.com",
  "role": "controller",
  "createdAt": "...",
  "updatedAt": "..."
}
```

**Erreurs possibles:**

404: Utilisateur non trouv√©  
400: Email invalide ou r√¥le non autoris√©   
500: Erreur serveur  

## DELETE /api/users/

**Description:** Supprime un utilisateur existant.  
**Acc√®s:** Admin uniquement  
**Headers:**
```http
Authorization: Bearer <token>
```
**R√©ponse r√©ussie:**
```json
{ "message": "Utilisateur supprim√© avec succ√®s" }
```
**Erreurs possibles:**  
404: Utilisateur non trouv√©  
403: Tentative de suppression de son propre compte  
500: Erreur serveur  

## üöõ Camions

## POST /api/trucks
**Description:** Ajouter un nouveau camion.  
**Acc√®s:** Admin uniquement.  
**Headers:**
```http
Authorization: Bearer <token>
Content-Type: application/json
```
**Corps de la requ√™te:**
```json
{
  "name": "Camion 01",
  "licensePlate": "GA-123-XY",
  "capacity": 5000
}
```
**R√©ponse r√©ussie:**
```json
{
  "_id": "664c41a41234567890abcdef",
  "name": "Camion 01",
  "licensePlate": "GA-123-XY",
  "capacity": 5000,
  "status": "disponible",
  "createdAt": "2024-05-23T12:00:00.000Z",
  "updatedAt": "2024-05-23T12:00:00.000Z"
}
```
**Erreurs possibles:**  
400: Camion avec cette plaque d√©j√† existant  
500: Erreur serveur  

## GET /api/trucks  
**Description:** R√©cup√©rer la liste de tous les camions.  
**Acc√®s:** Tous les utilisateurs connect√©s (admin, controller, driver).  

**Headers:**
```http
Authorization: Bearer <token>
```
**R√©ponse r√©ussie:**

```json
[
  {
    "_id": "664c41a41234567890abcdef",
    "name": "Camion 01",
    "licensePlate": "GA-123-XY",
    "capacity": 5000,
    "status": "disponible",
    "createdAt": "...",
    "updatedAt": "..."
  }
]
```

## PUT /api/trucks/
**Description:** Modifier les informations d‚Äôun camion existant.  
**Acc√®s:** Admin uniquement.
**Headers:**
```http
Authorization: Bearer <token>
Content-Type: application/json
```

**Corps de la requ√™te:**
```json
{
  "name": "Camion 01 MAJ",
  "licensePlate": "GA-456-ZT",
  "capacity": 6000,
  "status": "en maintenance"
}
```
**R√©ponse r√©ussie:**

```json
{
  "_id": "664c41a41234567890abcdef",
  "name": "Camion 01 MAJ",
  "licensePlate": "GA-456-ZT",
  "capacity": 6000,
  "status": "en maintenance",
  "createdAt": "...",
  "updatedAt": "..."
}
```
**Erreurs possibles:**

404: Camion non trouv√©  
500: Erreur serveur  

## DELETE /api/trucks/
**Description:** Supprimer un camion existant.
**Acc√®s:** Admin uniquement.

**Headers:**
```http
Authorization: Bearer <token>
```

**R√©ponse r√©ussie:**
```json
{ "message": "Camion supprim√© avec succ√®s" }
```

**Erreurs possibles:**  

404: Camion non trouv√©  
500: Erreur serveur  
Valeurs autoris√©es pour le champ status:

"disponible" (par d√©faut)
"en livraison"
"en maintenance"

## üîß Remarques techniques
Chaque camion est identifi√© par un nom unique (name) et une plaque unique (licensePlate).  
Les modifications et suppressions sont effectu√©es via l‚Äô_id MongoDB.  
Les dates createdAt et updatedAt sont automatiquement g√©n√©r√©es via timestamps.  


## üì¶ Stock
## GET /api/stock
**Description:** R√©cup√®re l'√©tat actuel du stock.

**R√©ponse r√©ussie:**
```json
{
  "_id": "680c987f686d639324ee0574",
  "fullBottles": 120,
  "emptyBottles": 110,
  "consignedBottles": 40,
  "createdAt": "2025-04-26T08:25:35.110Z",
  "updatedAt": "2025-05-26T11:09:21.222Z"
}
```
## PUT /api/stock
- **Authentification** : Requise
- **R√¥le requis** : `controller`
- **Description** : Met √† jour le stock en fonction du type de mouvement (entr√©e ou sortie).
- **Corps de la requ√™te** :
  ```json
  {
    "fullBottles": 10,
    "emptyBottles": 5,
    "consignedBottles": 2,
    "type": "entr√©e",
    "description": "Description du mouvement"
  }

**R√©ponse r√©ussie :**  
Code : 200 OK  
```json
{
  "message": "Stock mis √† jour avec succ√®s",
  "stock": {
    "fullBottles": 110,
    "emptyBottles": 55,
    "consignedBottles": 22
  }
}
```

## PATCH /api/stock  
Authentification : Requise  
R√¥le requis : controller  
Description : Ajoute partiellement des quantit√©s au stock.  
**Corps de la requ√™te :**
```json
{
  "fullBottles": 10,
  "emptyBottles": 5,
  "consignedBottles": 2
}
```

**R√©ponse r√©ussie :**
Code : 200 OK
```json
{
  "message": "Stock mis √† jour",
  "stock": {
    "fullBottles": 110,
    "emptyBottles": 55,
    "consignedBottles": 22
  }
}
```
## GET /api/stock/movements  
Authentification : Requise  
Description : R√©cup√®re l'historique des mouvements de stock.  
R√©ponse r√©ussie :  
Code : 200 OK  
```json
[
  {
    "type": "entr√©e",
    "fullBottles": 10,
    "emptyBottles": 5,
    "consignedBottles": 2,
    "description": "Description du mouvement",
    "user": {
      "name": "Nom de l'utilisateur",
      "email": "utilisateur@example.com"
    }
  }
]
```
**Erreurs**  
Stock insuffisant :  
Code : 400 Bad Request
 ```json
{
  "message": "Stock insuffisant"
}
```

Type de mouvement invalide :  
Code : 400 Bad Request
```json
{
  "message": "Type de mouvement invalide (entr√©e ou sortie requis)"
}
```
Erreur serveur :  
Code : 500 Internal Server Error  
```json
{
  "message": "Erreur serveur",
  "error": "D√©tails de l'erreur"
}
```

## üì¶ Livraisons

### Sch√©ma de Livraison

Le sch√©ma de livraison est d√©fini comme suit :
   Champ | Type | Description | Requis |
 |-------|------|-------------|--------|
 | `driver` | ObjectId | R√©f√©rence √† un utilisateur (chauffeur) | Oui |
 | `truck` | ObjectId | R√©f√©rence √† un camion existant | Oui |
 | `fullBottlesSent` | Number | Nombre de bouteilles pleines envoy√©es | Oui |
 | `emptyBottlesSent` | Number | Nombre de bouteilles vides envoy√©es | Oui |
 | `consignedBottles` | Number | Nombre de bouteilles consign√©es | Non (par d√©faut : 0) |
 | `fullBottlesReturned` | Number | Nombre de bouteilles pleines retourn√©es | Non (par d√©faut : 0) |
 | `emptyBottlesReturned` | Number | Nombre de bouteilles vides retourn√©es | Non (par d√©faut : 0) |
 | `status` | String | Statut de la livraison : "en cours", "termin√©e", "annul√©e" | Non (par d√©faut : "en cours") |

### Routes
 | Route | M√©thode | Description | Middleware |
 |-------|---------|-------------|------------|
 | `/deliveries/` | POST | Cr√©e une nouvelle livraison | `protect`, `restrictTo("controller")` |
 | `/deliveries/:id` | PATCH | Met √† jour une livraison existante | `protect`, `restrictTo("controller")` |

### POST /api/deliveries

**Description :** Cr√©e une nouvelle livraison.  
**Acc√®s :** Contr√¥leur uniquement.  
**Headers :**  
```http
Authorization: Bearer <token>
Content-Type: application/json
```
**Corps de la requ√™te :**
```json
{
  "driver": "ID_DU_CHAUFFEUR",
  "truck": "ID_DU_CAMION",
  "fullBottlesSent": 100,
  "emptyBottlesSent": 50
}
```
**R√©ponse r√©ussie :**
```json
{
  "_id": "ID_DE_LA_LIVRAISON",
  "driver": "ID_DU_CHAUFFEUR",
  "truck": "ID_DU_CAMION",
  "fullBottlesSent": 100,
  "emptyBottlesSent": 50,
  "consignedBottles": 0,
  "fullBottlesReturned": 0,
  "emptyBottlesReturned": 0,
  "status": "en cours",
  "createdAt": "2023-10-10T12:00:00.000Z",
  "updatedAt": "2023-10-10T12:00:00.000Z"
}
```
**Erreurs possibles :**  
500 : Erreur serveur

## PATCH /api/deliveries/

**Description :** Met √† jour une livraison existante, notamment pour indiquer les bouteilles retourn√©es et le statut.  
**Acc√®s :** Contr√¥leur uniquement.  
**Headers :**  
```http
Authorization: Bearer <token>
Content-Type: application/json
```
**Corps de la requ√™te :**
```json
{
  "fullBottlesReturned": 40,
  "emptyBottlesReturned": 30,
  "status": "termin√©e"
}
```
**R√©ponse r√©ussie :**
```json
{
  "message": "Livraison mise √† jour avec succ√®s",
  "livraison": {
    "_id": "ID_DE_LA_LIVRAISON",
    "driver": "ID_DU_CHAUFFEUR",
    "truck": "ID_DU_CAMION",
    "fullBottlesSent": 100,
    "emptyBottlesSent": 50,
    "consignedBottles": 20,
    "fullBottlesReturned": 40,
    "emptyBottlesReturned": 30,
    "status": "termin√©e",
    "createdAt": "2023-10-10T12:00:00.000Z",
    "updatedAt": "2023-10-11T10:00:00.000Z"
  }
}
```
**Erreurs possibles :**  
404 : Livraison non trouv√©e  
500 : Erreur serveur  

**Remarques techniques**  

Les livraisons sont li√©es √† un chauffeur et un camion existants.  
Le statut de la livraison peut √™tre "en cours", "termin√©e", ou "annul√©e".  
Lorsque le statut est mis √† jour √† "termin√©e", le stock est automatiquement mis √† jour avec les bouteilles retourn√©es.  

## üí∞ Salaires

### Sch√©ma de Salaire

Le sch√©ma de salaire est d√©fini comme suit :
   Champ | Type | Description | Requis |
 |-------|------|-------------|--------|
 | `driver` | ObjectId | R√©f√©rence √† un utilisateur (chauffeur) | Oui |
 | `totalDeliveries` | Number | Nombre total de livraisons effectu√©es | Non (par d√©faut : 0) |
 | `totalBottlesSold` | Number | Nombre total de bouteilles vendues | Non (par d√©faut : 0) |
 | `totalConsignedBottles` | Number | Nombre total de bouteilles consign√©es | Non (par d√©faut : 0) |
 | `salaryAmount` | Number | Montant total du salaire | Oui |
 | `status` | String | Statut du salaire : "en attente", "pay√©" | Non (par d√©faut : "en attente") |

### Routes
 | Route | M√©thode | Description | Middleware |
 |-------|---------|-------------|------------|
 | `/salaries/` | GET | R√©cup√®re tous les salaires | `protect`, `restrictTo("admin", "controller")` |
 | `/salaries/calculate/:driverId` | POST | Calcule le salaire d'un chauffeur | `protect`, `restrictTo("admin", "controller")` |
 | `/salaries/pay/:id` | PUT | Marque un salaire comme pay√© | `protect`, `restrictTo("admin", "controller")` |

## GET /api/salaries

**Description :** R√©cup√®re tous les salaires.  
**Acc√®s :** Admin et contr√¥leur uniquement.  
**Headers :**  
```http
Authorization: Bearer <token>
```

R√©ponse r√©ussie :  
```json
[
  {
    "_id": "ID_DU_SALAIRE",
    "driver": {
      "name": "Nom du chauffeur",
      "email": "chauffeur@example.com"
    },
    "totalDeliveries": 10,
    "totalBottlesSold": 500,
    "totalConsignedBottles": 20,
    "salaryAmount": 5040,
    "status": "en attente",
    "createdAt": "2023-10-10T12:00:00.000Z",
    "updatedAt": "2023-10-10T12:00:00.000Z"
  }
]
```

Erreurs possibles :  
500 : Erreur serveur  

## POST /api/salaries/calculate/
**Description :** Calcule le salaire d'un chauffeur en fonction de ses livraisons termin√©es.  
**Acc√®s :** Admin et contr√¥leur uniquement.  
**Headers :**  
```http
Authorization: Bearer <token>
```

**R√©ponse r√©ussie :**  
```json
{
  "_id": "ID_DU_SALAIRE",
  "driver": "ID_DU_CHAUFFEUR",
  "totalDeliveries": 10,
  "totalBottlesSold": 500,
  "totalConsignedBottles": 20,
  "salaryAmount": 5040,
  "status": "en attente",
  "createdAt": "2023-10-10T12:00:00.000Z",
  "updatedAt": "2023-10-10T12:00:00.000Z"
}
```

**Erreurs possibles :**  
400 : Ce chauffeur n'existe pas  
500 : Erreur serveur  

## PUT /api/salaries/pay/
**Description :** Met √† jour le statut d'un salaire √† "pay√©".  
**Acc√®s :** Admin et contr√¥leur uniquement.  
**Headers :**

```http
Authorization: Bearer <token>
```

**R√©ponse r√©ussie :**
```json
{
  "_id": "ID_DU_SALAIRE",
  "driver": "ID_DU_CHAUFFEUR",
  "totalDeliveries": 10,
  "totalBottlesSold": 500,
  "totalConsignedBottles": 20,
  "salaryAmount": 5040,
  "status": "pay√©",
  "createdAt": "2023-10-10T12:00:00.000Z",
  "updatedAt": "2023-10-11T10:00:00.000Z"
}
```

**Erreurs possibles :**  
404 : Salaire non trouv√©  
500 : Erreur serveur  

**Remarques techniques**  
Le calcul du salaire est bas√© sur le nombre de bouteilles vendues et consign√©es.  
Le prix par bouteille vendue est de 10 unit√©s et le bonus pour bouteille consign√©e est de 2 unit√©s.  
Le statut du salaire est mis √† jour manuellement apr√®s paiement.  


## üìä Statistiques du Tableau de Bord

### Route
   Route | M√©thode | Description | Middleware |
 |-------|---------|-------------|------------|
 | `/stats/` | GET | R√©cup√®re les statistiques globales du tableau de bord | `protect`, `restrictTo("admin", "controller")` |

### GET /api/stats

**Description :** R√©cup√®re les statistiques globales pour le tableau de bord, incluant des informations sur les utilisateurs, les livraisons, les camions, le stock, et les salaires en attente.

**Acc√®s :** Admin et contr√¥leur uniquement.

**Headers :**
```http
Authorization: Bearer <token>
```

**R√©ponse r√©ussie :**  
```json
{
  "totalUsers": 50,
  "totalDrivers": 20,
  "totalDeliveries": 150,
  "totalTrucks": 10,
  "stock": {
    "fullBottles": 1200,
    "emptyBottles": 800,
    "consignedBottles": 200
  },
  "totalSalariesPending": 5000
}
```

**D√©tails des champs :**  

| Champ                | Description                                                   |
|----------------------|---------------------------------------------------------------|
| `totalUsers`         | Nombre total d'utilisateurs                                   |
| `totalDrivers`       | Nombre total de chauffeurs                                    |
| `totalDeliveries`    | Nombre total de livraisons termin√©es                          |
| `totalTrucks`        | Nombre total de camions disponibles                           |
| `stock`              | √âtat actuel du stock, incluant les bouteilles pleines, vides et consign√©es |
| `totalSalariesPending` | Montant total des salaires en attente de paiement             |

**Erreurs possibles :**  
500 : Erreur serveur  

**Remarques techniques**  

Les statistiques sont calcul√©es en temps r√©el √† partir des donn√©es actuelles de la base de donn√©es.  
Les informations sur le stock sont r√©cup√©r√©es √† partir du document de stock le plus r√©cent ou initialis√©es √† z√©ro si aucun document n'existe.  
Le montant total des salaires en attente est calcul√© en utilisant une agr√©gation MongoDB pour sommer les montants des salaires avec le statut "en attente".  


## üîî Notifications

### Sch√©ma de Notification

Le sch√©ma de notification est d√©fini comme suit :
   Champ | Type | Description | Requis |
 |-------|------|-------------|--------|
 | `type` | String | Type de notification : "stock", "livraison", "salaire" | Oui |
 | `message` | String | Message de la notification | Oui |
 | `isRead` | Boolean | Indique si la notification a √©t√© lue | Non (par d√©faut : false) |
 | `createdAt` | Date | Date de cr√©ation de la notification | Non (par d√©faut : Date.now) |

### Routes
 | Route | M√©thode | Description | Middleware |
 |-------|---------|-------------|------------|
 | `/notifications/` | GET | R√©cup√®re toutes les notifications | `protect` |
 | `/notifications/:id` | PUT | Marque une notification comme lue | `protect` |
 | `/notifications/` | POST | Cr√©e une notification manuellement | `protect`, `restrictTo("admin")` |

### GET /api/notifications

**Description :** R√©cup√®re toutes les notifications, tri√©es par statut de lecture et date de cr√©ation.

**Acc√®s :** Tous les utilisateurs connect√©s.

**Headers :**
```http
Authorization: Bearer <token>
```

**R√©ponse r√©ussie :**
```json
[
  {
    "_id": "ID_DE_LA_NOTIFICATION",
    "type": "livraison",
    "message": "Une livraison a √©t√© mise √† jour.",
    "isRead": false,
    "createdAt": "2023-10-10T12:00:00.000Z"
  }
]
```
**Erreurs possibles :**  
500 : Erreur serveur  

## PUT /api/notifications/

**Description :** Marque une notification comme lue.  
**Acc√®s :** Tous les utilisateurs connect√©s.  
**Headers :**  
```http
Authorization: Bearer <token>
```

**R√©ponse r√©ussie :**  
```json
{
  "_id": "ID_DE_LA_NOTIFICATION",
  "type": "livraison",
  "message": "Une livraison a √©t√© mise √† jour.",
  "isRead": true,
  "createdAt": "2023-10-10T12:00:00.000Z"
}
```
**Erreurs possibles :**  
404 : Notification non trouv√©e  
500 : Erreur serveur  

## POST /api/notifications
**Description :** Cr√©e une notification manuellement.  
**Acc√®s :** Admin uniquement.  
**Headers :**
```http
Authorization: Bearer <token>
Content-Type: application/json
```

**Corps de la requ√™te :**
```json
{
  "type": "stock",
  "message": "Le stock de bouteilles pleines est bas."
}
```
**R√©ponse r√©ussie :**  
```json
{
  "_id": "ID_DE_LA_NOTIFICATION",
  "type": "stock",
  "message": "Le stock de bouteilles pleines est bas.",
  "isRead": false,
  "createdAt": "2023-10-10T12:00:00.000Z"
}
```
**Erreurs possibles :**  
500 : Erreur serveur  

**Remarques techniques**  
Les notifications sont tri√©es pour afficher d'abord celles qui n'ont pas √©t√© lues, suivies par les plus r√©centes.  
Les notifications peuvent √™tre cr√©√©es manuellement par un administrateur pour informer les utilisateurs de divers √©v√©nements ou alertes.  

## üìú Historique des Actions

### Sch√©ma de Log d'Action

Le sch√©ma de log d'action est d√©fini comme suit :
   Champ | Type | Description | Requis |
 |-------|------|-------------|--------|
 | `user` | ObjectId | R√©f√©rence √† l'utilisateur qui a effectu√© l'action | Oui |
 | `action` | String | Description de l'action effectu√©e | Oui |
 | `target` | String | Type de cible de l'action (par exemple, "Utilisateur", "Stock", "Livraison") | Oui |
 | `targetId` | ObjectId | R√©f√©rence √† l'identifiant de la cible de l'action | Non |
 | `timestamp` | Date | Date et heure de l'action | Non (par d√©faut : Date.now) |

### Route
 | Route | M√©thode | Description | Middleware |
 |-------|---------|-------------|------------|
 | `/logs/` | GET | R√©cup√®re l'historique des actions | `protect`, `restrictTo("admin")` |

### GET /api/logs

**Description :** R√©cup√®re l'historique des actions effectu√©es par les utilisateurs, tri√©es par date et heure de l'action.

**Acc√®s :** Admin uniquement.

**Headers :**
```http
Authorization: Bearer <token>
```
**R√©ponse r√©ussie :**
```json
[
  {
    "_id": "ID_DU_LOG",
    "user": {
      "name": "Nom de l'utilisateur",
      "email": "utilisateur@example.com"
    },
    "action": "Modification du stock",
    "target": "Stock",
    "targetId": "ID_DE_LA_CIBLE",
    "timestamp": "2023-10-10T12:00:00.000Z"
  }
]
```
D√©tails des champs :

| Champ       | Description                                                                 |
|-------------|-----------------------------------------------------------------------------|
| `user`      | Informations sur l'utilisateur qui a effectu√© l'action                     |
| `action`    | Description de l'action effectu√©e                                           |
| `target`    | Type de cible de l'action (ex. : Stock, Livraison, Utilisateur, etc.)      |
| `targetId`  | Identifiant de la cible de l'action, le cas √©ch√©ant                        |
| `timestamp` | Date et heure de l'action    


**Erreurs possibles :**  
500 : Erreur serveur  

**Remarques techniques**  
Les logs sont tri√©s par ordre d√©croissant de date et heure, ce qui permet de voir les actions les plus r√©centes en premier.  
Les informations sur l'utilisateur sont peupl√©es pour inclure le nom et l'email.  