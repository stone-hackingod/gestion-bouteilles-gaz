import NetInfo from '@react-native-community/netinfo';
import apiClient from '../api/apiClient';

class NetworkService {
  /**
   * V√©rifie la connectivit√© internet
   */
  static async checkInternetConnection() {
    try {
      const state = await NetInfo.fetch();
      console.log('üì° √âtat de la connexion:', {
        isConnected: state.isConnected,
        isInternetReachable: state.isInternetReachable,
        type: state.type,
        isWifi: state.isWifi,
        isCellular: state.isCellular
      });
      return state.isConnected && state.isInternetReachable;
    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification de la connectivit√©:', error);
      return false;
    }
  }

  /**
   * Teste la connexion √† l'API
   */
  static async testApiConnection() {
    try {
      console.log('üîç Test de connexion √† l\'API...');
      const response = await apiClient.get('/health', { timeout: 5000 });
      console.log('‚úÖ API accessible:', response.status);
      return { success: true, status: response.status };
    } catch (error) {
      console.error('‚ùå API inaccessible:', {
        message: error.message,
        code: error.code,
        status: error.response?.status
      });
      
      // Diagnostic d√©taill√©
      if (error.code === 'ECONNABORTED') {
        console.error('‚è∞ Le serveur ne r√©pond pas dans les d√©lais');
      } else if (error.code === 'ERR_NETWORK') {
        console.error('üåê Impossible de se connecter au serveur');
      } else if (error.response?.status === 404) {
        console.error('üîç Endpoint non trouv√©');
      } else if (error.response?.status >= 500) {
        console.error('üîß Erreur serveur');
      }
      
      return { 
        success: false, 
        error: error.message,
        code: error.code,
        status: error.response?.status 
      };
    }
  }

  /**
   * Diagnostic complet de la connectivit√©
   */
  static async performNetworkDiagnostic() {
    console.log('üîß D√©but du diagnostic r√©seau...');
    
    // 1. V√©rifier la connectivit√© internet
    const isConnected = await this.checkInternetConnection();
    if (!isConnected) {
      console.error('‚ùå Pas de connexion internet');
      return {
        internetConnection: false,
        apiConnection: false,
        recommendations: ['V√©rifiez votre connexion internet', 'Activez les donn√©es mobiles ou WiFi']
      };
    }

    // 2. Tester la connexion API
    const apiTest = await this.testApiConnection();
    
    const recommendations = [];
    if (!apiTest.success) {
      if (apiTest.code === 'ECONNABORTED') {
        recommendations.push('Le serveur est lent ou surcharg√©');
        recommendations.push('V√©rifiez que le serveur 31.97.55.154:5000 est actif');
      } else if (apiTest.code === 'ERR_NETWORK') {
        recommendations.push('Le serveur est inaccessible');
        recommendations.push('V√©rifiez l\'adresse IP et le port du serveur');
        recommendations.push('Contactez l\'administrateur syst√®me');
      }
    }

    return {
      internetConnection: isConnected,
      apiConnection: apiTest.success,
      apiStatus: apiTest.status,
      recommendations
    };
  }

  /**
   * Retourne les informations de configuration r√©seau
   */
  static getNetworkConfig() {
    return {
      apiUrl: 'http://31.97.55.154:5000/api',
      timeout: 10000,
      retryAttempts: 3
    };
  }
}

export default NetworkService; 